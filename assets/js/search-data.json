{
  
    
        "post0": {
            "title": "Monkeys",
            "content": "class MonkeyLoop { String [][] monkeys; public MonkeyLoop() { monkeys = new String[][]{ //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot;, //[0][3] legs &quot; Alice &quot; //[0][4] name }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot;, &quot; Iris &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot;, &quot; Samaya &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot;, &quot; Sarayu &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot;, //[4][3] &quot; Mort &quot; //[4][4] }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { for (int row = 0; row &lt; monkeyCount; row++) { for (int col = 0; col &lt; monkeys[row].length; col++) { System.out.print(monkeys[row][col] + &quot; &quot;); System.out.println(); } System.out.println(); } if (i &gt; 1){ System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); } else{ System.out.println(i + &quot; little monkey jumping on the bed...&quot;); } System.out.println(&quot;One fell down and bumped his head!&quot;); System.out.println(&quot;Mama called the doctor and the doctor said,&quot;); if (i == 1){ System.out.println(&quot;Put those monkeys right to bed!&quot;); } else{ System.out.println(&quot;No more monkeys jumping on the bed!&quot;); } System.out.println(); monkeyCount -= 1; } System.out.println(&quot;Now there&#39;s no little monkeys jumping on the bed&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Iris ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Samaya ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ Sarayu (◕‿◕✿) _⍾_/ ==4== _/ _ Mort 5 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, No more monkeys jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Iris ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Samaya ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ Sarayu 4 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, No more monkeys jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Iris ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Samaya 3 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, No more monkeys jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Iris 2 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, No more monkeys jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice 1 little monkey jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, Put those monkeys right to bed! Now there&#39;s no little monkeys jumping on the bed THE END . Horizontal vs Vertical . Printing monkeys horizontally vs vertically. I switched the order of the for loops. The row loop goes inside of the colomn loop in order to print the monkeys horizontally, and vice versa for vertically. . class MonkeyLoop { String [][] monkeys; public MonkeyLoop() { monkeys = new String[][]{ //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ &quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ &quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int col = 0; col &lt; monkeys[col].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { System.out.print(monkeys[row][col] + &quot; &quot;); } System.out.println(); } monkeyCount -= 1; } System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed - THE END . Hacks Questions . In imperative programming, functions are implicitly coded in every step required to solve a problem. Every operation is coded and the code itself specifies how the problem is to be solved, which means that pre-coded models are not called on. | Is this program in more of an Imperative Programming Style or OOP Style? Explain. Even though this program has some properties of OOP such as objects (the array) specific to the monkeyloop class and a constructor, it is more like the imperative programming style. Every step needed to run the program is coded in the printPoem function and the single command in main is just to run that method. . | Are the monkeys objects? Yes. Arrays are objects and even though in this program their content is not being alterned. You can still manipulate the data in the monkey array through the index if you wanted to . | How to access 2-D arrays? You can access the 2-D array by using the row index value and column index value: Name_of_the Array[Row_index][Column_index]; . | In this program the row represented the monkey number and the colomn represented each body part | .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/19/monkeys.html",
            "relUrl": "/java/jupyter/2022/09/19/monkeys.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "TT 5 Free Response Q1",
            "content": "Part 1 Free Response Question 1 . FRQ1 | . Other . Deployed Team Site | . Ticket Issue #5 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/09/19/TT5.html",
            "relUrl": "/hacks/2022/09/19/TT5.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "2019 FRQ1",
            "content": "The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . public class APCalendar { /** Returns true if year is a leap year and false otherwise.*/ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { /* to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { /* to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } . | (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. • isLeapYear(year) returns true if year is a leap year and false otherwise. Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. /** Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 */ | . public static int numberOfLeapYears(int year1, int year2) . public static int numberOfLeapYears(int year1, int year2) { int count=0; for (int i = year1; i &lt;= year2; i++) { if(isLeapYear(i)) { count += 1; } } return count; } . (b) Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. /** Returns the value representing the day of the week for the given date . (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. */ | . public static int dayOfWeek(int month, int day, int year) . public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int NthDay = dayOfYear(month, day, year); int returnDay = (startDay + nthDay - 1) % 7; return returnDay; } .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/19/FRQ1.html",
            "relUrl": "/java/jupyter/2022/09/19/FRQ1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "TT 4 Backend Development",
            "content": "Part 1 Ifs and Expressions Lesson . Lesson | . Part 2 AWS Deployment . Deployed Site | . Part 3 Focus and Habits . Notes from Video + Extra | . Other . Skills and Interests | Resume | . Ticket Issue #4 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/09/12/TT4.html",
            "relUrl": "/hacks/2022/09/12/TT4.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Focus and Habits",
            "content": "Video Notes . College students will sacrifice their mental health for their grades and for their classes | Build habits for yourself about doing things you love | Help others to make yourself feel better | Better physical heatlh can help improve mental health, workout or go on walks | Be grateful for the opportunities and resources you have | Don’t compare yourself to other, be the best version of yourself | . Notes of Gratitude . Dear Mom, I am so grateful that you are always there for me. Even when I have to ask you about the most simple questions when I’m doing homework, you always immediately stop what you are doing to help me. I feel comfortable to talk to you about whatever I want. I’m so lucky to have such a supportive mom. . Dear Mrs. Ayres, I am so grateful to have had you as my US history teacher. Your lessons were always so engaging and you put so much thought into them. I’m grateful you had so much passion for teaching and that made me look forward to your class everyday. . Gratitude List . I’m gratefull I live in San Diego | I’m grateful for my supportive friendgroup | I’m grateful for my best friend Aishani who’s always there for me | I’m grateful for a loving family | I’m grateful to not have to worry about money | . Goals . Sleep earlier | Stop procrastinating | Become more self driven and motivated | Start working out consistently | Fix my eating schedule | Get good grades and into a good college | .",
            "url": "https://tangalice.github.io/alicetang/2022/09/12/FocusHabits.html",
            "relUrl": "/2022/09/12/FocusHabits.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Skills and Interests",
            "content": "Inside School Extracurriculars . present . SD STEM Startups (Vice President) | NHS (member) | The Featheralist (Artist) | DNHS Food Bank (member) | DNHS Branch of UCSD OAP (Vice President) | . Outside School Extracurriculars . past and present . 12 week remote TechSmart Internship | 8 week REHS internship | UCSD Outreach Ambassador | Community Volunteering (English Tutoring) | Art | .",
            "url": "https://tangalice.github.io/alicetang/2022/09/11/Skills.html",
            "relUrl": "/2022/09/11/Skills.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Boolean and If Expressions",
            "content": "Boolean Expressions . A Boolean expression is a logical statement that is either True or False. Boolean expressions can compare any type of data if both parts of the expression have the same basic data type. A Boolean expression can be a combination of the Boolean constants true or false. . IF Statement . An If statement is a conditional statement that, when true, runs the code inside the statement. . //condition inside if statment is true so system outprints &quot;Hi&quot; if (true) { System.out.println(&quot;Hi&quot;); } //true and not false so system prints out &quot;Hello&quot; if (true &amp;&amp; !false) { System.out.println(&quot;Hello&quot;); } . Hi Hello . If/Else Statement . The If/Else statement extends the If statement by specifying an action if the If (true/false expression) is false. With the If statement, a program will execute the true code block or do nothing. With the If/Else statement, the program will execute either the true code block or the false code block so something is always executed with an If/Else statement. . int x = 10; //if statement is false so the else statment runs if (x&lt;5) { System.out.println(&quot;Hello&quot;); } else { System.out.println(&quot;Greater than 5&quot;); } . Greater than 5 . If/ElseIf Statement . The If/ElseIf statement allows you to create a chain of If statements. You are able to test more than two conditions unlike the If/Else statment. The If statements are evaluated in order until one of the If expressions is true or the end of the If/ElseIf chain is reached. If the end of the If/ElseIf chain is reached without a true expression, no code blocks are executed. . int x = 9; //false conditions until last else if statement so that one runs if (x&lt;2){ System.out.println(&quot;Less than 2&quot;); } else if (x&lt;4){ System.out.println(&quot;Less than 4&quot;); } else if (x&lt;6){ System.out.println(&quot;Less than 6&quot;); } else if (x&lt;8){ System.out.println(&quot;Less than 8&quot;); } else if (x&lt;10){ System.out.println(&quot;Less than 10&quot;); } . Less than 10 . If/ElseIf/Else Statement . If/ElseIf/Else statements are the same as If/ElseIf statements except they have a trailing Else statement added at the end. This way there is executable code if none of the If or Else If statments are true. . char x = &#39;d&#39;; //none of the if or elseif statments are true so it goes through the chain and runs the else statment if (x==&#39;a&#39;){ System.out.println(&quot;x is a&quot;); } else if (x==&#39;b&#39;){ System.out.println(&quot;x is b&quot;); } else if (x==&#39;c&#39;){ System.out.println(&quot;x is c&quot;); } else { System.out.println(&quot;not a, b, or c&quot;); } . not a, b, or c . If/ElseIf/Else statments can be used to decide different program outputs depending on what the user inputted. For example, they would be helpful in a menu program. . Scanner inputStream = new Scanner(System.in); String userInputStr; int choice; System.out.println(&quot;choose an integer 1-5: &quot;); userInputStr = inputStream.nextLine(); choice = Integer.parseInt(userInputStr); //get user input for choice System.out.println(choice); //false conditions until choice equals 4 and only that else if statement runs if (choice==1){ System.out.println(&quot; nyou chose one&quot;); } else if (choice==2){ System.out.println(&quot; nyou chose two&quot;); } else if (choice==3){ System.out.println(&quot; nyou chose three&quot;); } else if (choice==4){ System.out.println(&quot; nyou chose four&quot;); } else if (choice==5){ System.out.println(&quot; nyou chose five&quot;); } else { System.out.println(&quot;invalid input&quot;); } . choose an integer 1-5: 4 you chose four . Switch Statement . A switch statement is usually more efficient than a set of nested ifs. The switch statement is a control flow statement. It evaluzates a user selection and different parts of code can be executed quickly. Below, a switch statement will preform the same function as the chain of nested ifs above. . Scanner inputStream = new Scanner(System.in); String userInputStr; int choice; System.out.println(&quot;choose an integer 1-5: &quot;); userInputStr = inputStream.nextLine(); choice = Integer.parseInt(userInputStr); System.out.println(choice); switch (choice) { //based on what the user inputted for the choice variable, different cases will run case 1: System.out.println(&quot; nyou chose one&quot;); break; case 2: System.out.println(&quot; nyou chose two&quot;); break; case 3: System.out.println(&quot; nyou chose three&quot;); break; //default prevents it from moving on to and running the following cases case 4: System.out.println(&quot; nyou chose four&quot;); break; case 5: System.out.println(&quot; nyou chose five&quot;); break; default: System.out.println(&quot;invalid input&quot;); } . choose an integer 1-5: 4 you chose four . De Morgan&#39;s Law . DeMorgan&#39;s laws tell us how to transform logical expressions (with multiple AND and/or OR statements) using the NOT operator. . (not(A and B)) is equal to (not A or not B) | (not(A or B)) is equal to (not A and not B) | (not(A and B)) is not equal to (not A and not B) | . . boolean a = true; boolean b = false; //Not (A and B) boolean result1 = !(a &amp;&amp; b); //Not A or Not B boolean result2 = ((!a) || (!b)); if (result1 == result2){ System.out.println(&quot;result 1 and 2 are the same&quot;); } else{ //result 1 and 2 will always be equal, the code should never reach here System.out.println(&quot;Error&quot;); } //Not (A or B) boolean result3 = !(a || b); //Not A and Not B boolean result4 = ((!a) &amp;&amp; (!b)); if (result3 == result4){ System.out.println(&quot;result 3 and 4 are the same&quot;); } else{ //result 3 and 4 will always be equal, the code should never reach here System.out.println(&quot;Error&quot;); } . result 1 and 2 are the same result 3 and 4 are the same . Truth Tables . A truth table is a breakdown of a logic function by listing all possible values the function can attain. Such a table typically contains several rows and columns, with the top row representing the logical variables and combinations, in increasing complexity leading up to the final function. . Resources . https://www.computerhope.com/jargon/i/ifstatme.htm | https://eecs.oregonstate.edu/ecampus-video/CS161/template/chapter_4/ifelse.html | https://www.onlinemathlearning.com/demorgans-law.html | https://blog.penjee.com/what-is-demorgans-law-in-programming-answered-with-pics/ | https://www.cs.utah.edu/~germain/PPS/Topics/truth_tables_and_logic.html | .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/10/Ifs.html",
            "relUrl": "/java/jupyter/2022/09/10/Ifs.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Letter of Rec",
            "content": "Original Letter of Rec Prep: . When I first contacted you about writing a letter of rec for me for a summer internship you asked for 3 of my best moments from computer science principles. Here is exactly what I wrote before. . One very memorable moment for me was the end of trimester 1 of AP CSP. For the FINAL CSP Video I was asked along with a couple other students to help grade other people’s videos because the video I had made was very good and successfully connected all the college board topics to my work from the TRI. This moment in CSP is pretty important to me because prior to this happening I was intimidated by all of the computer science principles concepts which lead me to be very quiet in class and not participate as much during team live reviews. But I felt like my accomplishments had been recognized at this moment which lead me to be more confident in my programming skills during trimester 2. The increase and confidence also encouraged me to speak up more during discussions. . | Another memorable moment for me was the mid term vocabulary live review. Samaya was my partner and we got live reviewed together. I felt that this live review was different from all the previous ones. A really good conversation took place. It went beyond just what the vocab words meant and we discussed how the terms/concepts related to our code. I started seeing live reviews as an opportunity to further my knowledge and expand on what I had already learned instead of just a review to get a grade. . | A third memorable moment for me was when I got my cat facts API to work near the start of the second trimester. I had struggled for a bit and could not get my API to work. So I came in during tutorial for the first time to ask you for help. Previously I had been hesitant to reach out for help because I wasn’t confident in my programming skills at all. But after we worked together and I finally got my API to run correctly it was really rewarding for me. . | . Additions to the Original Letter: . Here is some progress I made in or through your classes following the original letter of rec. . I felt confident enough to apply to an REHS internship at the SDSC of UCSD because I took your AP CSP class. I applied for a project about the Visualization of Ultradian Rhythms in Sleep EEG and MEG. This internship required me to be familiar with the Python language and just computer science in general because I would be working with a language that I’ve never encountered called MatLab. During my interview for the position, I showed my research mentor snippets of python and javascript code that I wrote in your class. I also showed him the deployed PBL websites we spent the majority of the year designing and creating to demonstrate that I was familiar with programming. During the course of the internship, I worked with python and Matlab to develop different algorithms to transform raw EEG and MEG sleep data from 4 human subjects into visualizations like 2D Topographic Brain Maps and 3D Spatiotemporal Isosurfaces. I got to experience a real application of coding because of the foundations I built in computer science in your class. . | In the first few weeks of AP CSA, which will be the start of the second year I’m spending as your student, I can already feel the differences compared to the start of last year in AP CSP. During the very beginning of last school year, I struggled to understand everything; it felt like the class was taking off way too fast. Admittedly a lot of my weekly work in the live reviews were scuffed together last minute and included content that I still did not understand at the moment. I remember hoping during the team live reviews that you would not call on me to explain anything because I didn’t understand all the concepts. Over the past year, I feel that I’ve grown a lot as a programmer. Now, I understand everything that I am doing when I work on the weekly hacks, and if I am stuck it is quickly resolved. I’ve walked into all of the team live reviews so far this year feeling prepared. I find it funny compared to last year how I now sometimes feel like there is not enough time during live reviews to show you everythign I worked on during the week. . | .",
            "url": "https://tangalice.github.io/alicetang/2022/09/06/LOR.html",
            "relUrl": "/2022/09/06/LOR.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "TT 3 Innovation Using Objects",
            "content": "Part 1 Menu Exploration . Personal Menu | Team Math Options Menu | Team Repo | Team Roles For Features | . Part 2 Documentation and Analysis . Explain where a Class is defined: You define a class whenever you need to add variables, objects or methods to your code. Here a class called Menu is being defined. It will hold different variables, objects and methods. public class Menu { . | Explain where an instances of a Class is defined: An instance of a class is defined when you create an object of that class. Here in Code.org a new object of the Painter class called myPainter is being created Painter myPainter = new Painter(); . | Explain where an object is Calling a Method: An object calls a method when it wants to preform that action and execute the code. Here the Menu class is calling its main method to execute. Menu.main(null); . | Explain where an object is Mutating data: The Integer object is using the method parseInt to mutate the user input, which automatically enters as a string, into an interger. This integer is then stored in a new variable called userNum userNum = Integer.parseInt(userInputStr); . | Constructors: methods with the same name as the class it is in. It is a speacial methods used to initialize objects. Here is a constructor that takes parameters inside of a class called ThreeString - Exploration Code //constructor that takes parameters ThreeString(String str1, String str2, String str3) { if (validString(str1) &amp;&amp; validString(str2) &amp;&amp; validString(str3)) { string1 = str1; string2 = str2; string3 = str3; } else { string1 = DEFAULT_STRING; string2 = DEFAULT_STRING; string3 = DEFAULT_STRING; } } . | Mutators: methods that mutate the value of a private member variable. Here the methods setString1 sets the value of a private member of the ThreeString class called string1 public boolean setString1(String str) { boolean status = false; if (validString(str)) { string1 = str; status = true; } return status; } . | Accessors: methods that accesses and returns the value of a private member variable. Here the getString1 method acesses and returns the value of the private member string1. public String getString1() { return string1; } . | Describe Console, GUI differences, or Code.org differences: A console is not as visual as the other two. It requires the user to enter inputs and returns respective outputs. To code, it requires a good understanding of script and syntax. The GUI (graphic user interface) is more user friendly because it has a visual display and it is a more clickable platform. But you can’t really perform multiple tasks at once. On Code.org there is the painter as a visual object to help understand exactly how the code implements. The file and public class name should be the same. This platform is great for beginners to begin to learn how to code. | . Part 3 Other . Unit 1 completed on Code.org | . Ticket Issue #3 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/09/05/TT3.html",
            "relUrl": "/hacks/2022/09/05/TT3.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } Scanner input = new Scanner(System.in); Scanner inputStream = new Scanner(System.in); String userInputStr; int numofNum, userNum, fact, tempType; double celcius, farenheit, kelvin, medianNum, sdNumber; char endReply; public static final String REPORT = &quot; nFactorial of &quot;; public static final String FCONVERT = &quot; nConverted to Farenheit: &quot;; public static final String KCONVERT = &quot; nConverted to Kelvin: &quot;; //median public static double findMed(double arr[], int n) { // sort the array Arrays.sort(arr); // check for even case if (n % 2 != 0) { return (double)arr[n / 2]; } return (double)(arr[(n - 1) / 2] + arr[n / 2]) / 2.0; } //factorial public static int findFact(int n) { int f = 1; for (int i=1; i&lt;n+1; i++) { f = f * i; } return f; } // standard deviation public static double sdcalc (double[] numsSD) { double sum = 0.0; for (int i=0; i&lt;numsSD.length; i++) { sum += numsSD[i]; } double average = sum/numsSD.length; double sdsum = 0.0; double standev = 0.0; for (int j=0; j&lt;numsSD.length; j++) { sdsum += Math.pow(numsSD[j]-average, 2); standev = Math.sqrt(sdsum/numsSD.length); } return standev; } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Factorial&quot;); System.out.println(&quot;2 - Temperature Converter&quot;); System.out.println(&quot;3 - Median&quot;); System.out.println(&quot;4 - Number Sort&quot;); System.out.println(&quot;5 - Standard Deviation&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Factorial &quot;); System.out.print(&quot; nInput an integer: &quot;); userInputStr = input.nextLine(); userNum = Integer.parseInt(userInputStr); fact = findFact(userNum); System.out.print(REPORT + userNum +&quot; is &quot;+fact); break; case 2: // initialize variables celcius = 0.; farenheit = 0.; kelvin = 0.; System.out.print(&quot;This program converts degress in Celcius to Farenheit or Kelvin n&quot;); // get degress in celcius from user System.out.print(&quot; nTemperature in Celcius: &quot;); userInputStr = inputStream.nextLine(); celcius = Double.parseDouble(userInputStr); System.out.print(celcius); // input from user, what do they want to convert to while(true) { System.out.print(&quot; nConvert to (1)Farenheit or (2)Kelvin: &quot;); userInputStr = inputStream.nextLine(); tempType = Integer.parseInt(userInputStr); if ((tempType == 1) || (tempType == 2)) { break; } else { System.out.print(tempType); System.out.println(&quot; nPlease input either 1 or 2&quot;); } } System.out.print(tempType); //conversion if (tempType == 1) //convert to farenheit { farenheit = (celcius*1.8)+32; //multiple by 1.8 and then add 32, result is a double System.out.print(FCONVERT); System.out.print(farenheit); } else //convert to kelvin { kelvin = celcius + 273.15; //add 273.15, result is a double System.out.print(KCONVERT); System.out.print(kelvin); } break; case 3: System.out.print(&quot;Median &quot;); System.out.print(&quot; nhow many values would you like to input?&quot;); userInputStr = inputStream.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] arr = new double [numofNum]; //creates array with doubles, numofNum number of values in the array for (int i=0; i&lt;numofNum; i++) //gets info from user for each spot in array { System.out.print(&quot; nenter value: &quot;); userInputStr = inputStream.nextLine(); arr[i] = Double.parseDouble(userInputStr); System.out.print(arr[i]); } int n = arr.length; System.out.println(&quot; nMedian: &quot; + findMed(arr, n)); break; case 4: System.out.print(&quot;Number Sort &quot;); System.out.print(&quot; nhow many values would you like to input?&quot;); userInputStr = inputStream.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] arr2 = new double [numofNum]; //creates array with doubles, numofNum number of values in the array for (int i=0; i&lt;numofNum; i++) //gets info from user for each spot in array { System.out.print(&quot; nenter value: &quot;); userInputStr = inputStream.nextLine(); arr2[i] = Double.parseDouble(userInputStr); System.out.print(arr2[i]); } Arrays.sort(arr2); //sort array System.out.println(&quot; nSorted Numbers: &quot;); for (int i=0; i&lt;numofNum; i++) //prints each spot in array { System.out.print(arr2[i]+ &quot;, &quot;); } break; case 5: System.out.print(&quot;Standard Deviation&quot;); System.out.print(&quot; nhow many values would you like to find the standard deviation of?&quot;); userInputStr = input.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] numsSD = new double [numofNum]; //creates array with doubles, nomofNum number of values in the array for (int i=0; i&lt;numofNum; i++) { System.out.print(&quot; nenter value:&quot;); userInputStr = input.nextLine(); numsSD[i] = Double.parseDouble(userInputStr); System.out.print(numsSD[i]); } sdNumber = sdcalc(numsSD); System.out.print(&quot; nthe standard deviation is &quot; +sdNumber); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Factorial 2 - Temperature Converter 3 - Median 4 - Number Sort 5 - Standard Deviation 0 - Quit - 1: Factorial Input an integer: Factorial of 7 is 5040 2: This program converts degress in Celcius to Farenheit or Kelvin Temperature in Celcius: 35.0 Convert to (1)Farenheit or (2)Kelvin: 2 Converted to Kelvin: 308.15 3: Median how many values would you like to input? enter value: 1.0 enter value: 6.0 enter value: 5.0 enter value: 7.0 Median: 5.5 4: Number Sort how many values would you like to input? enter value: 2.0 enter value: 2.0 enter value: 1.0 Sorted Numbers: 1.0, 2.0, 2.0, 5: Standard Deviation how many values would you like to find the standard deviation of? enter value:3.0 enter value:3.0 enter value:4.0 enter value:8.0 enter value:99.0 the standard deviation is 37.844946822528364 0: Goodbye, World! . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/05/Menu.html",
            "relUrl": "/java/jupyter/2022/09/05/Menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Three String Class",
            "content": "import java.util.*; public class Explore { public static void main(String[] args) { //initializing object data String s1=&quot;aa&quot;; String s2=&quot;bb&quot;; String s3=&quot;cc&quot;; String s4=&quot;dd&quot;; String INVALIDSTR=&quot;ajfaworngvowrngvhaworgvnaer;igvnae;rigvnowihefowahg&quot; + &quot;owarhgaei;rgvn&quot;; String VALIDSTR=&quot;test2&quot;; //Instantiate four ThreeString objects ThreeString myObject1 = new ThreeString(); ThreeString myObject2 = new ThreeString(s1, s2, s3); ThreeString myObject3 = new ThreeString(); ThreeString myObject4 = new ThreeString(s2, s3, s4); System.out.println(&quot;=========Original objects========&quot;); System.out.println(&quot;Object 1: &quot;+myObject1.toString()); System.out.println(&quot;Object 2: &quot;+myObject2.toString()); System.out.println(&quot;Object 3: &quot;+myObject3.toString()); System.out.println(&quot;Object 4: &quot;+myObject4.toString()); //mutate one member in each object myObject1.setString1(s4); myObject2.setString2(s1); myObject3.setString3(s3); myObject4.setString1(s2); System.out.println(&quot;=========Mutated objects=========&quot;); System.out.println(&quot;Object 1: &quot;+myObject1.toString()); System.out.println(&quot;Object 2: &quot;+myObject2.toString()); System.out.println(&quot;Object 3: &quot;+myObject3.toString()); System.out.println(&quot;Object 4: &quot;+myObject4.toString()); //Mutator Tests System.out.println(&quot; n=========Mutator tests========== n&quot;); //Test 1, unsuccessful if (myObject1.setString1(INVALIDSTR)) { System.out.println(&quot;TEST1: setString1 mutator call successful&quot;); System.out.println(&quot;myObject1.string1 is &quot;+ myObject1.getString1()); } else { System.out.println(&quot;TEST1: setString1 mutator call unsuccessful&quot;); System.out.println(&quot;myObject1.string1 is &quot;+ myObject1.getString1()); } //Test 2, successful if (myObject3.setString3(VALIDSTR)) { System.out.println(&quot;TEST2: setString1 mutator call successful&quot;); System.out.println(&quot;myObject3.string3 is &quot;+ myObject3.getString3()); } else { System.out.println(&quot;TEST2: setString1 mutator call unsuccessful&quot;); System.out.println(&quot;myObject3.string3 is &quot;+ myObject3.getString3()); } //Accessor Tests System.out.println(&quot; n=========Acessor calls========== n&quot;); System.out.println(&quot;myObject1.string1 is &quot;+ myObject1.getString1()); System.out.println(&quot;myObject2.string2 is &quot;+ myObject2.getString2()); } } class ThreeString { //private members private String string1; private String string2; private String string3; //public constants public static final int LENGTH_MIN = 1; public static final int LENGTH_MAX = 50; public static final String DEFAULT_STRING = &quot; (undefined) &quot;; //default constructor ThreeString() { string1 = DEFAULT_STRING; string2 = DEFAULT_STRING; string3 = DEFAULT_STRING; } //constructor that takes parameters ThreeString(String str1, String str2, String str3) { if (validString(str1) &amp;&amp; validString(str2) &amp;&amp; validString(str3)) { string1 = str1; string2 = str2; string3 = str3; } else { string1 = DEFAULT_STRING; string2 = DEFAULT_STRING; string3 = DEFAULT_STRING; } } // Mutators and Accessors for all 3 private members- public boolean setString1(String str) { boolean status = false; if (validString(str)) { string1 = str; status = true; } return status; } public String getString1() { return string1; } public boolean setString2(String str) { boolean status = false; if (validString(str)) { string2 = str; status = true; } return status; } public String getString2() { return string2; } public boolean setString3(String str) { boolean status = false; if (validString(str)) { string3 = str; status = true; } return status; } public String getString3() { return string3; } // //method to display all member information public String toString() { return string1+&quot; &quot;+string2+&quot; &quot;+string3 +&quot; n&quot;; } // private method to check if string is valid private boolean validString( String str ) { if ((str.length() &gt; LENGTH_MAX) || (str.length() &lt; LENGTH_MIN)) { return false; } else { return true; } } } Explore.main(null); . =========Original objects======== Object 1: (undefined) (undefined) (undefined) Object 2: aa bb cc Object 3: (undefined) (undefined) (undefined) Object 4: bb cc dd =========Mutated objects========= Object 1: dd (undefined) (undefined) Object 2: aa aa cc Object 3: (undefined) (undefined) cc Object 4: bb cc dd =========Mutator tests========== TEST1: setString1 mutator call unsuccessful myObject1.string1 is dd TEST2: setString1 mutator call successful myObject3.string3 is test2 =========Acessor calls========== myObject1.string1 is dd myObject2.string2 is aa .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/04/ThreeString.html",
            "relUrl": "/java/jupyter/2022/09/04/ThreeString.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Number Sort",
            "content": "import java.util.Scanner; public class Sort{ public static void main(String[] args) { String userInputStr; int numofNum; Scanner inputStream = new Scanner(System.in); System.out.print(&quot;how many values would you like to input?&quot;); userInputStr = inputStream.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] arr = new double [numofNum]; //creates array with doubles, numofNum number of values in the array for (int i=0; i&lt;numofNum; i++) //gets info from user for each spot in array { System.out.print(&quot; nenter value: &quot;); userInputStr = inputStream.nextLine(); arr[i] = Double.parseDouble(userInputStr); System.out.print(arr[i]); } Arrays.sort(arr); //sort array System.out.println(&quot; n nSorted Numbers: &quot;); for (int i=0; i&lt;numofNum; i++) //prints each spot in array { System.out.print(arr[i]+ &quot;, &quot;); } } } Sort.main(null); . how many values would you like to input? enter value: 3.2 enter value: 5.7 enter value: 1.2 enter value: 8.6 enter value: 5.4 Sorted Numbers: 1.2, 3.2, 5.4, 5.7, 8.6, .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/04/Sort.html",
            "relUrl": "/java/jupyter/2022/09/04/Sort.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Median Calculator",
            "content": "import java.util.Scanner; public class Median { public static void main(String[] args) { String userInputStr; double medianNum; int numofNum; Scanner inputStream = new Scanner(System.in); System.out.print(&quot;how many values would you like to input?&quot;); userInputStr = inputStream.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] arr = new double [numofNum]; //creates array with doubles, numofNum number of values in the array for (int i=0; i&lt;numofNum; i++) //gets info from user for each spot in array { System.out.print(&quot; nenter value: &quot;); userInputStr = inputStream.nextLine(); arr[i] = Double.parseDouble(userInputStr); System.out.print(arr[i]); } int n = arr.length; System.out.println(&quot; nMedian: &quot; + findMed(arr, n)); } public static double findMed(double arr[], int n) { // sort the array Arrays.sort(arr); // check for even case if (n % 2 != 0) { return (double)arr[n / 2]; } return (double)(arr[(n - 1) / 2] + arr[n / 2]) / 2.0; } } Median.main(null); . how many values would you like to input? enter value: 2.2 enter value: 1.1 enter value: 4.4 enter value: 5.5 enter value: 3.3 enter value: 6.6 Median: 3.85 .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/02/Median.html",
            "relUrl": "/java/jupyter/2022/09/02/Median.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Factorial Calculator",
            "content": "import java.util.*; import java.lang.Math; public class Factorial { //Constants public static final String REPORT = &quot; nFactorial of &quot;; public static void main(String[] args) { String userInputStr; int userNum, fact; Scanner inputStream = new Scanner(System.in); while(true) { System.out.print(&quot; nInput an integer: &quot;); userInputStr = inputStream.nextLine(); userNum = Integer.parseInt(userInputStr); fact = findFact(userNum); System.out.print(REPORT + userNum +&quot; is &quot;+fact); System.out.print(&quot; nContinue(Yes/No)? &quot;); userInputStr = inputStream.nextLine(); char a = userInputStr.charAt(0); if ((a == &#39;y&#39;) || (a == &#39;Y&#39;)) { System.out.print(userInputStr+&quot; n&quot;); } if ((a == &#39;n&#39;) || (a == &#39;N&#39;)) { System.out.print(userInputStr); break; } } } static int findFact(int n) { int f = 1; for (int i=1; i&lt;n+1; i++) { f = f * i; } return f; } } Factorial.main(null); . Input an integer: Factorial of 7 is 5040 Continue(Yes/No)? Yes Input an integer: Factorial of 4 is 24 Continue(Yes/No)? yeah Input an integer: Factorial of 9 is 362880 Continue(Yes/No)? noo .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/01/Factorial.html",
            "relUrl": "/java/jupyter/2022/09/01/Factorial.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "To Do List",
            "content": "TO DO LIST . ⭐️= must do today . CSA . hacks Monday morning ⭐️ . | . Physics . 2 worksheets Monday morning ⭐️ . | . Lit . Read 2 short stories Monday morning ⭐️ . | Literary devices Tuesday 10 pm . | Read 20 more pages Friday morning . | Workshop Friday connections work Friday morning . | Allusions presentation next Monday Sep 5 . | . Stats . Worksheet Monday morning ⭐️ . | Canvas MC Monday morning ⭐️ . | . College . Ayres letter of rec ASAP . | Ask mort about letter of rec ASAP . | Prepare to meet with ozuna Friday afternoon . | Work on essays Saturday 2pm . | Finish set up common app account . | Set up UC account . | Work on list of colleges . | . Other . Online Shop . | Revive SD STEM startups . | Fix clothes . | Clean blazer shoe laces . | .",
            "url": "https://tangalice.github.io/alicetang/2022/08/29/To-Do-List.html",
            "relUrl": "/2022/08/29/To-Do-List.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "TT 2 Innovation Primatives",
            "content": "Part 1 Fastpages . Notes Page to capture new ideas/terms learned | New jupyter notebook files published (Temp Converter, Recipe Nutrition) | New post file published with image (TT 1.1) | New docx file published from google doc source (To Do List) | EC : documenting another class (Lit annotations) | . Part 2 Primitives . Java Jupyter Notebook demonstrating understanding of primitives | . Part 3 Bash . Bash Installations | . Part 4 Roles, Issues, and Scrumboard . Team Scrum Board | . . Team Roles Decided : Scrum Master - Alice, Frontend - Iris, Backend - Samaya, Deployment Manager - Sarayu | . Part 5 Other . Home Page customized | Organizational pages for Jupyter Notebooks and Hacks | 5 lessons completed on code.org | . . Ticket Issue #2 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/08/29/TT2.html",
            "relUrl": "/hacks/2022/08/29/TT2.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Bash",
            "content": "Python --version Python2 --version . Python 3.8.8 Python 2.7.16 . conda list . # packages in environment at /Users/alicetang/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py38_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2021.05 py38_0 anaconda-client 1.7.2 py38_0 anaconda-navigator 2.0.3 py38_0 anaconda-project 0.9.1 pyhd3eb1b0_1 anyio 2.2.0 py38hecd8cb5_1 appdirs 1.4.4 py_0 applaunchservices 0.2.1 py_0 appnope 0.1.2 py38hecd8cb5_1001 appscript 1.1.2 py38h9ed2024_0 argh 0.26.2 py38_0 argon2-cffi 20.1.0 py38h9ed2024_1 asn1crypto 1.4.0 py_0 astroid 2.5 py38hecd8cb5_1 astropy 4.2.1 py38h9ed2024_1 async_generator 1.10 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 20.3.0 pyhd3eb1b0_0 autopep8 1.5.6 pyhd3eb1b0_0 babel 2.9.0 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.0 pyhd3eb1b0_2 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.shutil_get_terminal_size 1.0.0 pyhd3eb1b0_3 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi beautifulsoup4 4.9.3 pyha847dfd_0 bitarray 1.9.2 py38h9ed2024_1 bkcharts 0.2 py38_0 black 19.10b0 py_0 blas 1.0 mkl bleach 3.3.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.3.2 py38hecd8cb5_0 boto 2.49.0 py38_0 bottleneck 1.3.2 py38hf1fa96c_1 brotlipy 0.7.0 py38h9ed2024_1003 bzip2 1.0.8 h1de35cc_0 c-ares 1.17.1 h9ed2024_0 ca-certificates 2021.4.13 hecd8cb5_1 certifi 2020.12.5 py38hecd8cb5_0 cffi 1.14.5 py38h2125817_0 chardet 4.0.0 py38hecd8cb5_1003 click 7.1.2 pyhd3eb1b0_0 cloudpickle 1.6.0 py_0 clyent 1.2.2 py38_1 colorama 0.4.4 pyhd3eb1b0_0 conda 4.13.0 py38hecd8cb5_0 conda-build 3.21.4 py38hecd8cb5_0 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-package-handling 1.7.3 py38h9ed2024_1 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 contextlib2 0.6.0.post1 py_0 cryptography 3.4.7 py38h2fd3fbb_0 curl 7.71.1 hb0a8c7a_1 cycler 0.10.0 py38_0 cython 0.29.23 py38h23ab428_0 cytoolz 0.11.0 py38haf1e3a3_0 dask 2021.4.0 pyhd3eb1b0_0 dask-core 2021.4.0 pyhd3eb1b0_0 dbus 1.13.18 h18a8e69_0 decorator 5.0.6 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 py_0 distributed 2021.4.0 py38hecd8cb5_0 docutils 0.17 py38hecd8cb5_1 entrypoints 0.3 py38_0 et_xmlfile 1.0.1 py_1001 expat 2.3.0 h23ab428_2 fastcache 1.1.0 py38h1de35cc_0 filelock 3.0.12 pyhd3eb1b0_1 flake8 3.9.0 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 flask-sqlalchemy 2.5.1 pypi_0 pypi freetype 2.10.4 ha233b18_0 fsspec 0.9.0 pyhd3eb1b0_0 future 0.18.2 py38_1 get_terminal_size 1.0.0 h7520d66_0 gettext 0.21.0 h7535e17_0 gevent 21.1.2 py38h9ed2024_1 glib 2.68.1 hdf23fa2_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.0.8 py38h6ef4df4_3 greenlet 1.0.0 py38h23ab428_2 h5py 2.10.0 py38h3134771_0 hdf5 1.10.4 hfa1e0ec_0 heapdict 1.0.1 py_0 html5lib 1.1 py_0 icu 58.2 h0a44026_3 idna 2.10 pyhd3eb1b0_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.2.0 pyhd3eb1b0_0 importlib-metadata 3.10.0 py38hecd8cb5_0 importlib_metadata 3.10.0 hd3eb1b0_0 iniconfig 1.1.1 pyhd3eb1b0_0 intel-openmp 2021.2.0 hecd8cb5_564 intervaltree 3.1.0 py_0 ipykernel 5.3.4 py38h5ca1d4c_0 ipython 7.22.0 py38h01d92e1_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.3 pyhd3eb1b0_1 isort 5.8.0 pyhd3eb1b0_0 itsdangerous 1.1.0 pyhd3eb1b0_0 jbig 2.1 h4d881f8_0 jdcal 1.4.1 py_0 jedi 0.17.2 py38hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 joblib 1.0.1 pyhd3eb1b0_0 jpeg 9b he5867d9_2 json5 0.9.5 py_0 jsonschema 3.2.0 py_2 jupyter 1.0.0 py38_7 jupyter-packaging 0.7.12 pyhd3eb1b0_0 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.7.1 py38hecd8cb5_0 jupyter_server 1.4.1 py38hecd8cb5_0 jupyterlab 3.0.14 pyhd3eb1b0_1 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.4.0 pyhd3eb1b0_0 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 keyring 22.3.0 py38hecd8cb5_0 kiwisolver 1.3.1 py38h23ab428_0 krb5 1.18.2 h75d18d8_0 lazy-object-proxy 1.6.0 py38h9ed2024_0 lcms2 2.12 hf1fd2bf_0 libarchive 3.4.2 haa3ed63_0 libcurl 7.71.1 h8a08a2b_1 libcxx 10.0.0 1 libedit 3.1.20210216 h9ed2024_1 libev 4.33 haf1e3a3_0 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 h1de35cc_0 liblief 0.10.1 h0a44026_0 libllvm10 10.0.1 h76017ad_5 libpng 1.6.37 ha441bb4_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.9.0 ha12b0ac_1 libtiff 4.2.0 h87d7836_0 libuv 1.40.0 haf1e3a3_0 libwebp-base 1.2.0 h9ed2024_0 libxml2 2.9.10 h7cdb67c_3 libxslt 1.1.34 h83b36ba_0 llvm-openmp 10.0.0 h28b9765_0 llvmlite 0.36.0 py38he4411ff_4 locket 0.2.1 py38hecd8cb5_1 lxml 4.6.3 py38h26b266a_0 lz4-c 1.9.3 h23ab428_0 lzo 2.10 haf1e3a3_2 markupsafe 1.1.1 py38h1de35cc_1 mat73 0.59 pypi_0 pypi matplotlib 3.3.4 py38hecd8cb5_0 matplotlib-base 3.3.4 py38h8b3ea08_0 mccabe 0.6.1 py38_1 mistune 0.8.4 py38h1de35cc_1001 mkl 2021.2.0 hecd8cb5_269 mkl-service 2.3.0 py38h9ed2024_1 mkl_fft 1.3.0 py38h4a7008c_2 mkl_random 1.2.1 py38hb2f4e1b_2 mock 4.0.3 pyhd3eb1b0_0 more-itertools 8.7.0 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpmath 1.2.1 py38hecd8cb5_0 msgpack-python 1.0.2 py38hf7b0b51_1 multipledispatch 0.6.0 py38_0 mypy_extensions 0.4.3 py38_0 navigator-updater 0.2.1 py38_0 nbclassic 0.2.6 pyhd3eb1b0_0 nbclient 0.5.3 pyhd3eb1b0_0 nbconvert 6.0.7 py38_0 nbformat 5.1.3 pyhd3eb1b0_0 ncurses 6.2 h0a44026_1 nest-asyncio 1.5.1 pyhd3eb1b0_0 networkx 2.5 py_0 nltk 3.6.1 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1006 notebook 6.3.0 py38hecd8cb5_0 numba 0.53.1 py38hb2f4e1b_0 numexpr 2.7.3 py38h5873af2_1 numpy 1.20.1 py38hd6e1bb9_0 numpy-base 1.20.1 py38h585ceec_0 numpydoc 1.1.0 pyhd3eb1b0_1 olefile 0.46 py_0 openpyxl 3.0.7 pyhd3eb1b0_0 openssl 1.1.1k h9ed2024_0 packaging 20.9 pyhd3eb1b0_0 pandas 1.2.4 py38h23ab428_0 pandoc 2.12 hecd8cb5_0 pandocfilters 1.4.3 py38hecd8cb5_1 parso 0.7.0 py_0 partd 1.2.0 pyhd3eb1b0_0 path 15.1.2 py38hecd8cb5_0 path.py 12.5.0 0 pathlib2 2.3.5 py38hecd8cb5_2 pathspec 0.7.0 py_0 patsy 0.5.1 py38_0 pcre 8.44 hb1e8313_0 pep8 1.7.1 py38_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 8.2.0 py38h5270095_0 pip 21.3.1 pypi_0 pypi pkginfo 1.7.0 py38hecd8cb5_0 pluggy 0.13.1 py38hecd8cb5_0 ply 3.11 py38_0 prometheus_client 0.10.1 pyhd3eb1b0_0 prompt-toolkit 3.0.17 pyh06a4308_0 prompt_toolkit 3.0.17 hd3eb1b0_0 psutil 5.8.0 py38h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 py 1.10.0 pyhd3eb1b0_0 py-lief 0.10.1 py38haf313ee_0 pycodestyle 2.6.0 pyhd3eb1b0_0 pycosat 0.6.3 py38h1de35cc_1 pycparser 2.20 py_2 pycurl 7.43.0.6 py38hddc9c9b_0 pydocstyle 6.0.0 pyhd3eb1b0_0 pyerfa 1.7.3 py38h9ed2024_0 pyflakes 2.2.0 pyhd3eb1b0_0 pygments 2.8.1 pyhd3eb1b0_0 pylint 2.7.4 py38hecd8cb5_1 pyls-black 0.4.6 hd3eb1b0_0 pyls-spyder 0.3.2 pyhd3eb1b0_0 pyodbc 4.0.30 py38h0a44026_0 pyopenssl 20.0.1 pyhd3eb1b0_1 pyparsing 2.4.7 pyhd3eb1b0_0 pyqt 5.9.2 py38h655552a_2 pyrsistent 0.17.3 py38haf1e3a3_0 pysocks 1.7.1 py38_1 pytables 3.6.1 py38h4727e94_0 pytest 6.2.3 py38hecd8cb5_2 python 3.8.8 h88f2d9e_5 python-dateutil 2.8.1 pyhd3eb1b0_0 python-jsonrpc-server 0.4.0 py_0 python-language-server 0.36.2 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python.app 3 py38h9ed2024_0 pytz 2021.1 pyhd3eb1b0_0 pywavelets 1.1.1 py38haf1e3a3_2 pyyaml 5.4.1 py38h9ed2024_1 pyzmq 23.2.0 pypi_0 pypi qdarkstyle 2.8.1 py_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.2 pyhd3eb1b0_0 qtconsole 5.0.3 pyhd3eb1b0_0 qtpy 1.9.0 py_0 readline 8.1 h9ed2024_0 regex 2021.4.4 py38h9ed2024_0 requests 2.25.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.18.0 py_0 rtree 0.9.7 py38hecd8cb5_1 ruamel_yaml 0.15.100 py38h9ed2024_0 scikit-image 0.18.1 py38hb2f4e1b_0 scikit-learn 0.24.1 py38hb2f4e1b_0 scipy 1.6.2 py38hd5f7400_1 seaborn 0.11.1 pyhd3eb1b0_0 send2trash 1.5.0 pyhd3eb1b0_1 setuptools 52.0.0 py38hecd8cb5_0 simplegeneric 0.8.1 py38_2 singledispatch 3.6.1 pyhd3eb1b0_1001 sip 4.19.8 py38h0a44026_0 six 1.15.0 py38hecd8cb5_0 sniffio 1.2.0 py38hecd8cb5_1 snowballstemmer 2.1.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.3.0 pyhd3eb1b0_0 soupsieve 2.2.1 pyhd3eb1b0_0 sphinx 4.0.1 pyhd3eb1b0_0 sphinxcontrib 1.0 py38_1 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.4 pyhd3eb1b0_0 sphinxcontrib-websupport 1.2.4 py_0 spyder 4.2.5 py38hecd8cb5_0 spyder-kernels 1.10.2 py38hecd8cb5_0 sqlalchemy 1.4.7 py38h9ed2024_0 sqlite 3.35.4 hce871da_0 statsmodels 0.12.2 py38h9ed2024_0 sympy 1.8 py38hecd8cb5_0 tbb 2020.3 h879752b_0 tblib 1.7.0 py_0 terminado 0.9.4 py38hecd8cb5_0 testpath 0.4.4 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.1.0 pyh5ca1d4c_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2020.10.1 py38h0cf3a3e_2 tk 8.6.10 hb0a8c7a_0 toml 0.10.2 pyhd3eb1b0_0 toolz 0.11.1 pyhd3eb1b0_0 tornado 6.1 py38h9ed2024_0 tqdm 4.59.0 pyhd3eb1b0_1 traitlets 5.0.5 pyhd3eb1b0_0 typed-ast 1.4.2 py38h9ed2024_1 typing_extensions 3.7.4.3 pyha847dfd_0 ujson 4.0.2 py38h23ab428_0 unicodecsv 0.14.1 py38_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.4 pyhd3eb1b0_0 watchdog 1.0.2 py38h9ed2024_1 wcwidth 0.2.5 py_0 webencodings 0.5.1 py38_1 werkzeug 1.0.1 pyhd3eb1b0_0 wheel 0.36.2 pyhd3eb1b0_0 widgetsnbextension 3.5.1 py38_0 wrapt 1.12.1 py38haf1e3a3_1 wurlitzer 2.1.0 py38hecd8cb5_0 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 1.3.8 pyhd3eb1b0_0 xlwings 0.23.0 py38hecd8cb5_0 xlwt 1.3.0 py38_0 xmltodict 0.12.0 py_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 zeromq 4.3.4 h23ab428_0 zict 2.0.0 pyhd3eb1b0_0 zipp 3.4.1 pyhd3eb1b0_0 zlib 1.2.11 h1de35cc_3 zope 1.0 py38_1 zope.event 4.5.0 py38_0 zope.interface 5.3.0 py38h9ed2024_0 zstd 1.4.5 h41d2c2f_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py38_7 jupyter-packaging 0.7.12 pyhd3eb1b0_0 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.7.1 py38hecd8cb5_0 jupyter_server 1.4.1 py38hecd8cb5_0 jupyterlab 3.0.14 pyhd3eb1b0_1 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.4.0 pyhd3eb1b0_0 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /Users/alicetang/Library/Jupyter/kernels/bash java /Users/alicetang/Library/Jupyter/kernels/java javascript /Users/alicetang/Library/Jupyter/kernels/javascript python3 /Library/Frameworks/Python.framework/Versions/3.9/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Library/Frameworks/Python.framework/Versions/3.9/share/jupyter/kernels/python3 .",
            "url": "https://tangalice.github.io/alicetang/jupyter/2022/08/29/Bash.html",
            "relUrl": "/jupyter/2022/08/29/Bash.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Temperature Converter",
            "content": "import java.util.*; import java.lang.Math; public class TempConverter { //Constants public static final String FCONVERT = &quot; nConverted to Farenheit: &quot;; public static final String KCONVERT = &quot; nConverted to Kelvin: &quot;; public static void main(String[] args) { String userInputStr; //temporary String variable to hold String input from user char endReply; // yes or no so y/n is fitting int tempType; // 1 or 2 to describe the type of conversion double celcius, farenheit, kelvin; //temperature will have decimals boolean end; //boolean (true/false) to end while loop Scanner inputStream = new Scanner(System.in); // initialize variables celcius = 0.; farenheit = 0.; kelvin = 0.; end = true; System.out.print(&quot;This program converts degress in Celcius to Farenheit or Kelvin n&quot;); while(end) { // get degress in celcius from user System.out.print(&quot; nTemperature in Celcius: &quot;); userInputStr = inputStream.nextLine(); celcius = Double.parseDouble(userInputStr); System.out.print(celcius); // input from user, what do they want to conver to while(true) { System.out.print(&quot; nConvert to (1)Farenheit or (2)Kelvin: &quot;); userInputStr = inputStream.nextLine(); tempType = Integer.parseInt(userInputStr); if ((tempType == 1) || (tempType == 2)) { break; } else { System.out.print(tempType); System.out.println(&quot; nPlease input either 1 or 2&quot;); } } System.out.print(tempType); //conversion if (tempType == 1) //convert to farenheit { farenheit = (celcius*1.8)+32; //multiple by 1.8 and then add 32, result is a double System.out.print(FCONVERT); System.out.print(farenheit); } else //convert to kelvin { kelvin = celcius + 273.15; //add 273.15, result is a double System.out.print(KCONVERT); System.out.print(kelvin); } // input from user, ask if they want to do another conversion while(true) { System.out.print(&quot; nWould you like to do another conversion? (y/n): &quot;); userInputStr = inputStream.nextLine(); endReply = userInputStr.charAt(0); if ((endReply == &#39;y&#39;) || (endReply == &#39;Y&#39;)) //do another conversion { System.out.print(endReply); break; } else if ((endReply == &#39;n&#39;) || (endReply == &#39;N&#39;)) //stop here { System.out.print(endReply); end = false; break; } else //invalid input, repeat prompt { System.out.print(endReply); System.out.print(&quot; nPlease input y or n n&quot;); } } } } } TempConverter.main(null); . This program converts degress in Celcius to Farenheit or Kelvin Temperature in Celcius: 56.0 Convert to (1)Farenheit or (2)Kelvin: 4 Please input either 1 or 2 Convert to (1)Farenheit or (2)Kelvin: 1 Converted to Farenheit: 132.8 Would you like to do another conversion? (y/n): g Please input y or n Would you like to do another conversion? (y/n): y Temperature in Celcius: 36.0 Convert to (1)Farenheit or (2)Kelvin: 2 Converted to Kelvin: 309.15 Would you like to do another conversion? (y/n): N .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/08/28/TemperatureConverter.html",
            "relUrl": "/java/jupyter/2022/08/28/TemperatureConverter.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "AP Lit Annotations",
            "content": ". .",
            "url": "https://tangalice.github.io/alicetang/ap%20lit/2022/08/27/Volar.html",
            "relUrl": "/ap%20lit/2022/08/27/Volar.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Recipe Nutrition Calculator",
            "content": "// Grams of Nutrition Converter import java.util.Scanner; public class Nutrition { // food #1 constants static final String FOOD_1_NAME = &quot;all-purpose flour&quot;; static final int FOOD_1_CALORIES_P100G = 364; // in calories static final double FOOD_1_FAT_P100G = 0.98; // in grams static final double FOOD_1_CARBS_P100G = 76.31; // in grams static final double FOOD_1_PROTEIN_P100G = 10.33; // in grams // food #2 constants static final String FOOD_2_NAME = &quot;egg&quot;; static final int FOOD_2_CALORIES_P100G = 143; // in calories static final double FOOD_2_FAT_P100G = 9.5; // in grams static final double FOOD_2_CARBS_P100G = 0.7; // in grams static final double FOOD_2_PROTEIN_P100G = 13.; // in grams // food #3 constants static final String FOOD_3_NAME = &quot;cheddar cheese&quot;; static final int FOOD_3_CALORIES_P100G = 104; // in calories static final double FOOD_3_FAT_P100G = 33.; // in grams static final double FOOD_3_CARBS_P100G = 3.1; // in grams static final double FOOD_3_PROTEIN_P100G = 23; // in grams // food #4 constants static final String FOOD_4_NAME = &quot;potato&quot;; static final int FOOD_4_CALORIES_P100G = 93; // in calories static final double FOOD_4_FAT_P100G = 0.1; // in grams static final double FOOD_4_CARBS_P100G = 21.; // in grams static final double FOOD_4_PROTEIN_P100G = 2.5; // in grams // food #5 constants static final String FOOD_5_NAME = &quot;tomato paste&quot;; static final int FOOD_5_CALORIES_P100G = 82; // in calories static final double FOOD_5_FAT_P100G = 0.5; // in grams static final double FOOD_5_CARBS_P100G = 19.; // in grams static final double FOOD_5_PROTEIN_P100G = 4.3; // in grams static final String INDENT = &quot; &quot;; static final String SEPARATOR = &quot; n&quot;; public static void main(String[] args) { String recipeName, userInputStr; int recipeServingsInt, userInputInt; double totalCals, totalFat, totalCarbs, totalProtein, serCals, serFat, serCarbs, serProtein; Scanner inputStream = new Scanner(System.in); // initialize accumulator variables totalCals = 0; totalFat = 0.; totalCarbs = 0.; totalProtein = 0.; // initialize result variables serCals = 0; serFat = 0.; serCarbs = 0.; serProtein = 0.; // print menu System.out.println(&quot;- List of Possible Ingredients &quot;); System.out.println(INDENT + &quot;Food #1: &quot; + FOOD_1_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_2_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_3_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_4_NAME); System.out.println(INDENT + &quot;Food #3: &quot; + FOOD_5_NAME + SEPARATOR); // name of recipe System.out.print(&quot;What is the recipe&#39;s name? &quot;); recipeName = inputStream.nextLine(); System.out.print(recipeName); // # of servings System.out.print(&quot; nHow many servings? &quot;); userInputStr = inputStream.nextLine(); recipeServingsInt = Integer.parseInt(userInputStr); System.out.print(recipeServingsInt); if ((recipeServingsInt &gt; 15) || (recipeServingsInt &lt; 1)) //servings range { System.out.println(&quot;Error: Enter a value between 1 and 15 n&quot;); System.exit(-1); } // food #1 System.out.print(&quot; nHow many grams of &quot; + FOOD_1_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_1_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_1_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_1_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_1_PROTEIN_P100G / 100.); // food #2 System.out.print(&quot; nHow many grams of &quot; + FOOD_2_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_2_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_2_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_2_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_2_PROTEIN_P100G / 100.); // food #3 System.out.print(&quot; nHow many grams of &quot; + FOOD_3_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_3_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_3_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_3_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_3_PROTEIN_P100G / 100.); // food #4 System.out.print(&quot; nHow many grams of &quot; + FOOD_4_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_4_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_4_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_4_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_4_PROTEIN_P100G / 100.); // food #5 System.out.print(&quot; nHow many grams of &quot; + FOOD_5_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_5_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_5_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_5_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_5_PROTEIN_P100G / 100.); inputStream.close(); // calculate results -- serCals = totalCals / recipeServingsInt; serFat = totalFat / recipeServingsInt; serCarbs = totalCarbs / recipeServingsInt; serProtein = totalProtein / recipeServingsInt; // report results -- System.out.println(&quot; nNutrition for &quot; + recipeName + &quot; per serving&quot;); System.out.println(INDENT + &quot;Calories: &quot; + serCals + &quot; cals&quot;); System.out.println(INDENT + &quot;Fat: &quot; + serFat + &quot; grams&quot;); System.out.println(INDENT + &quot;Carbs: &quot; + serCarbs + &quot; grams&quot;); System.out.println(INDENT + &quot;Protein: &quot; + serProtein + &quot; grams&quot;); } } Nutrition.main(null); . - List of Possible Ingredients Food #1: all-purpose flour Food #2: egg Food #2: cheddar cheese Food #2: potato Food #3: tomato paste What is the recipe&#39;s name? Breakfast Burrito How many servings? 6 How many grams of all-purpose flour? 70 How many grams of egg? 50 How many grams of cheddar cheese? 30 How many grams of potato? 40 How many grams of tomato paste? 23 Nutrition for Breakfast Burrito per serving Calories: 68.92666666666666 cals Fat: 2.5818333333333334 grams Carbs: 11.2445 grams Protein: 3.77 grams .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/08/26/Nutrition.html",
            "relUrl": "/java/jupyter/2022/08/26/Nutrition.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "TT 1 Tools and Equipment",
            "content": "Part 1 Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | . . FastPages Insights | . Part 2 Java Project . . Java Project Minor Change Commit | CSA Project Insights | . Ticket Issue #1 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/08/21/TT1.html",
            "relUrl": "/hacks/2022/08/21/TT1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Python Jupyter Notebook",
            "content": "msg1 = &quot;Hello&quot; msg2 = &quot;I&#39;m Alice&quot; print(msg1) print(msg2) . Hello I&#39;m Alice .",
            "url": "https://tangalice.github.io/alicetang/python/jupyter/2022/08/21/PythonJupyterNotebook.html",
            "relUrl": "/python/jupyter/2022/08/21/PythonJupyterNotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tangalice.github.io/alicetang/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post23": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tangalice.github.io/alicetang/2020/01/14/test-markdown-post.html",
            "relUrl": "/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi my name is Alice and I am taking AP Computer Science A this year as a senior at Del Norte High School. .",
          "url": "https://tangalice.github.io/alicetang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Hacks",
          "content": "TT 5 - Free Response Q1 . TT 4 - Backend Development . TT 3 - Innovation Using Objects . TT 2 - Innovation Primitives . TT 1 - Tools and Equipment .",
          "url": "https://tangalice.github.io/alicetang/hacks/",
          "relUrl": "/hacks/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Jupyter Notebooks",
          "content": "FRQ1 . Booleans and Ifs . Three String Class . Menu . Number Sort . Median Calculator . Factorial Calculator . Temperature Converter . Recipe Nutrition Calculator . Bash . Python Greeting .",
          "url": "https://tangalice.github.io/alicetang/notebooks/",
          "relUrl": "/notebooks/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Notes",
          "content": "Front matter - Section at the top of your jupyter notebooks that helps to manage fast pages . . Primitive Java Data Types . boolean | char | byte | short | int | long | float | double | . Non-Primitive Java Data Types . String | Array | class __________________________ . | Constructors: methods with the same name as the class it is in. It is a speacial methods used to initialize objects. Here is a constructor that takes parameters inside of a class called ThreeString - Exploration Code //constructor that takes parameters ThreeString(String str1, String str2, String str3) { if (validString(str1) &amp;&amp; validString(str2) &amp;&amp; validString(str3)) { string1 = str1; string2 = str2; string3 = str3; } else { string1 = DEFAULT_STRING; string2 = DEFAULT_STRING; string3 = DEFAULT_STRING; } } . | Mutators: methods that mutate the value of a private member variable. Here the methods setString1 sets the value of a private member of the ThreeString class called string1 public boolean setString1(String str) { boolean status = false; if (validString(str)) { string1 = str; status = true; } return status; } . | Accessors: methods that accesses and returns the value of a private member variable. Here the getString1 method acesses and returns the value of the private member string1. public String getString1() { return string1; } . | .",
          "url": "https://tangalice.github.io/alicetang/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tangalice.github.io/alicetang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}