{
  
    
        "post0": {
            "title": "TT 1.1 Innovation Primatives",
            "content": "",
            "url": "https://tangalice.github.io/alicetang/markdown/2022/08/26/TT2.html",
            "relUrl": "/markdown/2022/08/26/TT2.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Recipe Nutrition Calculator",
            "content": "// Grams of Nutrition Converter import java.util.Scanner; public class Nutrition { // food #1 constants static final String FOOD_1_NAME = &quot;all-purpose flour&quot;; static final int FOOD_1_CALORIES_P100G = 364; // in calories static final double FOOD_1_FAT_P100G = 0.98; // in grams static final double FOOD_1_CARBS_P100G = 76.31; // in grams static final double FOOD_1_PROTEIN_P100G = 10.33; // in grams // food #2 constants static final String FOOD_2_NAME = &quot;egg&quot;; static final int FOOD_2_CALORIES_P100G = 143; // in calories static final double FOOD_2_FAT_P100G = 9.5; // in grams static final double FOOD_2_CARBS_P100G = 0.7; // in grams static final double FOOD_2_PROTEIN_P100G = 13.; // in grams // food #3 constants static final String FOOD_3_NAME = &quot;cheddar cheese&quot;; static final int FOOD_3_CALORIES_P100G = 104; // in calories static final double FOOD_3_FAT_P100G = 33.; // in grams static final double FOOD_3_CARBS_P100G = 3.1; // in grams static final double FOOD_3_PROTEIN_P100G = 23; // in grams // food #4 constants static final String FOOD_4_NAME = &quot;potato&quot;; static final int FOOD_4_CALORIES_P100G = 93; // in calories static final double FOOD_4_FAT_P100G = 0.1; // in grams static final double FOOD_4_CARBS_P100G = 21.; // in grams static final double FOOD_4_PROTEIN_P100G = 2.5; // in grams // food #5 constants static final String FOOD_5_NAME = &quot;tomato paste&quot;; static final int FOOD_5_CALORIES_P100G = 82; // in calories static final double FOOD_5_FAT_P100G = 0.5; // in grams static final double FOOD_5_CARBS_P100G = 19.; // in grams static final double FOOD_5_PROTEIN_P100G = 4.3; // in grams static final String INDENT = &quot; &quot;; static final String SEPARATOR = &quot; n&quot;; public static void main(String[] args) { String recipeName, userInputStr; int recipeServingsInt, userInputInt; double totalCals, totalFat, totalCarbs, totalProtein, serCals, serFat, serCarbs, serProtein; Scanner inputStream = new Scanner(System.in); // initialize accumulator variables totalCals = 0; totalFat = 0.; totalCarbs = 0.; totalProtein = 0.; // initialize result variables serCals = 0; serFat = 0.; serCarbs = 0.; serProtein = 0.; // print menu System.out.println(&quot;- List of Possible Ingredients &quot;); System.out.println(INDENT + &quot;Food #1: &quot; + FOOD_1_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_2_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_3_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_4_NAME); System.out.println(INDENT + &quot;Food #3: &quot; + FOOD_5_NAME + SEPARATOR); // name of recipe System.out.print(&quot;What is the recipe&#39;s name? &quot;); recipeName = inputStream.nextLine(); System.out.print(recipeName); // # of servings System.out.print(&quot; nHow many servings? &quot;); userInputStr = inputStream.nextLine(); recipeServingsInt = Integer.parseInt(userInputStr); System.out.print(recipeServingsInt); if ((recipeServingsInt &gt; 15) || (recipeServingsInt &lt; 1)) //servings range { System.out.println(&quot;Error: Enter a value between 1 and 15 n&quot;); System.exit(-1); } // food #1 System.out.print(&quot; nHow many grams of &quot; + FOOD_1_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_1_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_1_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_1_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_1_PROTEIN_P100G / 100.); // food #2 System.out.print(&quot; nHow many grams of &quot; + FOOD_2_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_2_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_2_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_2_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_2_PROTEIN_P100G / 100.); // food #3 System.out.print(&quot; nHow many grams of &quot; + FOOD_3_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_3_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_3_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_3_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_3_PROTEIN_P100G / 100.); // food #4 System.out.print(&quot; nHow many grams of &quot; + FOOD_4_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_4_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_4_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_4_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_4_PROTEIN_P100G / 100.); // food #5 System.out.print(&quot; nHow many grams of &quot; + FOOD_5_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_5_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_5_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_5_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_5_PROTEIN_P100G / 100.); inputStream.close(); // calculate results -- serCals = totalCals / recipeServingsInt; serFat = totalFat / recipeServingsInt; serCarbs = totalCarbs / recipeServingsInt; serProtein = totalProtein / recipeServingsInt; // report results -- System.out.println(&quot; nNutrition for &quot; + recipeName + &quot; per serving&quot;); System.out.println(INDENT + &quot;Calories: &quot; + serCals + &quot; cals&quot;); System.out.println(INDENT + &quot;Fat: &quot; + serFat + &quot; grams&quot;); System.out.println(INDENT + &quot;Carbs: &quot; + serCarbs + &quot; grams&quot;); System.out.println(INDENT + &quot;Protein: &quot; + serProtein + &quot; grams&quot;); } } Nutrition.main(null); . - List of Possible Ingredients Food #1: all-purpose flour Food #2: egg Food #2: cheddar cheese Food #2: potato Food #3: tomato paste What is the recipe&#39;s name? Breakfast Burrito How many servings? 6 How many grams of all-purpose flour? 70 How many grams of egg? 50 How many grams of cheddar cheese? 30 How many grams of potato? 40 How many grams of tomato paste? 23 Nutrition for Breakfast Burrito per serving Calories: 68.92666666666666 cals Fat: 2.5818333333333334 grams Carbs: 11.2445 grams Protein: 3.77 grams .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/08/22/Nutrition.html",
            "relUrl": "/java/jupyter/2022/08/22/Nutrition.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "TT 1.0 Tools and Equipment",
            "content": "Part 1 Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | . . FastPages Insights | . Part 2 Java Project . . Java Project Minor Change Commit | CSA Project Insights | . Ticket Issue #1 .",
            "url": "https://tangalice.github.io/alicetang/markdown/2022/08/21/TT1.html",
            "relUrl": "/markdown/2022/08/21/TT1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python Jupyter Notebook",
            "content": "msg1 = &quot;Hello&quot; msg2 = &quot;I&#39;m Alice&quot; print(msg1) print(msg2) . Hello I&#39;m Alice .",
            "url": "https://tangalice.github.io/alicetang/python/jupyter/2022/08/21/PythonJupyterNotebook.html",
            "relUrl": "/python/jupyter/2022/08/21/PythonJupyterNotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Temperature Converter",
            "content": "import java.util.*; import java.lang.Math; public class AvgCalculator { //Constants public static final String FCONVERT = &quot;Converted to Farenheit: &quot;; public static final String KCONVERT = &quot;Converted to Kelvin: &quot;; public static void main(String[] args) { String recipeName, userInputStr; int recipeServingsInt, userInputInt; double totalCals, totalFat, totalCarbs, totalProtein, serCals, serFat, serCarbs, serProtein; Scanner inputStream = new Scanner(System.in); } } . | | | public class Foothill | { | //Constants | public static final int MIN_VALUE = 0; | public static final int MAX_VALUE = 2; | public static final char MIN_SYMBOL = &#39;A&#39;; | public static final char MAX_SYMBOL =&#39;Z&#39;; | public static final char DEFAULT_SYMBOL = &#39; &#39;; | | public static void main(String[] args) | { | //instantiate three Player objects | Player [] myPlayer = new Player[3]; | myPlayer[0] = new Player(); //default player | myPlayer[1] = new Player(); | myPlayer[2] = new Player(); | | //instantiate a 3x3 grid board | Player [][] board = new Player[3][3]; | for (int i=0; i&lt;3; i++) | { | for (int j=0; j&lt;3; j++) | { | board[i][j] = new Player(); | } | } | | //set characters for each player | char s1=symbolFromUser(); | myPlayer[1].setSym(s1); | char s2=symbolFromUser(); | myPlayer[2].setSym(s2); | | for(int gameIndex=1; gameIndex&lt;6; gameIndex++) //5 games total | { | resetBoard(board, myPlayer[0]); | System.out.println(&#34;Game &#34;+gameIndex+&#34; starting&#34;); | displayBoard(board); | | while(true) //loops between P1 and P2 moves until win or draw | { | makeAMove(board, myPlayer[1]); | displayBoard(board); | if (isWin(board, myPlayer[1])) | { | System.out.println(&#34;Player &#34;+myPlayer[1].getSym()+&#34; won&#34;); | myPlayer[1].addWin(); | System.out.println(&#34;Player &#34;+myPlayer[1].getSym()+&#34;: &#34; | +myPlayer[1].getWins()+&#34; wins&#34;); | System.out.println(&#34;Player &#34;+myPlayer[2].getSym()+&#34;: &#34; | +myPlayer[2].getWins()+&#34; wins&#34;); | break; | } | if (isDraw(board)) | { | System.out.println(&#34;Draw&#34;); | System.out.println(&#34;Player &#34;+myPlayer[1].getSym()+&#34;: &#34; | +myPlayer[1].getWins()+&#34; wins&#34;); | System.out.println(&#34;Player &#34;+myPlayer[2].getSym()+&#34;: &#34; | +myPlayer[2].getWins()+&#34; wins&#34;); | break; | } | makeAMove(board, myPlayer[2]); | displayBoard(board); | if (isWin(board, myPlayer[2])) | { | System.out.println(&#34;Player &#34;+myPlayer[2].getSym()+&#34; won&#34;); | myPlayer[2].addWin(); | System.out.println(&#34;Player &#34;+myPlayer[1].getSym()+&#34;: &#34; | +myPlayer[1].getWins()+&#34; wins&#34;); | System.out.println(&#34;Player &#34;+myPlayer[2].getSym()+&#34;: &#34; | +myPlayer[2].getWins()+&#34; wins&#34;); | break; | } | if (isDraw(board)) | { | System.out.println(&#34;Draw&#34;); | System.out.println(&#34;Player &#34;+myPlayer[1].getSym()+&#34;: &#34; | +myPlayer[1].getWins()+&#34; wins&#34;); | System.out.println(&#34;Player &#34;+myPlayer[2].getSym()+&#34;: &#34; | +myPlayer[2].getWins()+&#34; wins&#34;); | break; | } | } | } | myPlayer[1].resetWins(); | myPlayer[2].resetWins(); | | } | | // foothill methods | // method getting symbol for each user | static char symbolFromUser() | { | String userInputStr; | Scanner inputStream = new Scanner(System.in); | | while(true) | { | System.out.println(&#34;What is the symbol for a player?&#34;); | userInputStr = inputStream.nextLine(); | char s = userInputStr.charAt(0); | if (validSym(s)) | { | return s; | } | else | { | System.out.println(&#34;please input a capital letter&#34;); | } | } | } | | //method that checks if symbol is valid or not | private static boolean validSym( char sym ) | { | if ((sym &gt;= MIN_SYMBOL) &amp;&amp; (sym &lt;= MAX_SYMBOL)) | { | return true; | } | else | { | return false; | } | } | | //method that sets all spaces in board to default (blank) | static void resetBoard(Player[][] board, Player p) | { | for (int i=0; i&lt;3; i++) | { | for (int j=0; j&lt;3; j++) | { | board[i][j].setSym(p.getSym()); | } | } | } | | //method that replaces specific spot on board with player symbol | static void makeAMove(Player[][] board, Player p) | { | int row=0, col=0; | | while(true) | { | row = getInputPos(0, p); //row is 0 | col = getInputPos(1, p); //column is 1 | | if (board[row][col].getSym() == DEFAULT_SYMBOL) | { | board[row][col].setSym(p.getSym()); | break; | } | } | } | | //method that collects position input and checks it | static int getInputPos(int rowcol, Player p) | { | int pos = 0; | String userInputStr; | Scanner inputStream = new Scanner(System.in); | | while (true) | { | if (rowcol==0) //row is 0 | { | System.out.println(&#34;Enter a row (0, 1, or 2) for player &#34; | +p.getSym()+&#34;: &#34;); | } | else //column is 1 | { | System.out.println(&#34;Enter a column (0, 1, or 2) for player &#34; | +p.getSym()+&#34;: &#34;); | } | userInputStr = inputStream.nextLine(); | pos = Integer.parseInt(userInputStr); | if ((pos &gt;= MIN_VALUE) &amp;&amp; (pos &lt;= MAX_VALUE)) | { | return pos; | } | } | } | | //method that displays board grid | static void displayBoard(Player[][] board) | { | for (int i=0; i&lt;3; i++) | { | System.out.println(&#34; n-&#34;); | for (int j=0; j&lt;3; j++) | { | System.out.print(&#34;| &#34;+board[i][j].getSym()); | } | System.out.print(&#34;|&#34;); | } | System.out.println(&#34; n- n&#34;); | } | | //checks if a player has won or not | static boolean isWin(Player[][] board, Player p) | { | for (int i=0; i&lt;3; i++) //loop to check rows | { | if (checkSame(board, i, 0, i, 1, i, 2, p)) | { | return true; | } | } | for (int i=0; i&lt;3; i++) //loop to check columns | { | if (checkSame(board, 0, i, 1, i, 2, i, p)) | { | return true; | } | } | if (checkSame(board, 0, 0, 1, 1, 2, 2, p)) //checks diagonal | { | return true; | } | if (checkSame(board, 0, 2, 1, 1, 2, 0, p)) //checks diagonal | { | return true; | } | return false; | } | | //method that checks if winning positions are all the same player | static boolean checkSame(Player[][] board, int r1, int c1, int r2, int c2, | int r3, int c3, Player p) | { | char s1 = board[r1][c1].getSym(); | char s2 = board[r2][c2].getSym(); | char s3 = board[r3][c3].getSym(); | if (( s1 == s2) &amp;&amp; ( s2 == s3) &amp;&amp; ( s3 == p.getSym())) | { | return true; | } | else | { | return false; | } | } | | //method that checks if the board is a draw | static boolean isDraw(Player[][] board) | { | for (int i=0; i&lt;3; i++) | { | for (int j=0; j&lt;3; j++) | { | if (board[i][j].getSym() == DEFAULT_SYMBOL) | { | return false; | } | } | } | return true; | } | } Unresolved dependencies: - class Player .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/08/21/JavaJupyterNotebook.html",
            "relUrl": "/java/jupyter/2022/08/21/JavaJupyterNotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tangalice.github.io/alicetang/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tangalice.github.io/alicetang/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tangalice.github.io/alicetang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Notes",
          "content": "##Notes .",
          "url": "https://tangalice.github.io/alicetang/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tangalice.github.io/alicetang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}